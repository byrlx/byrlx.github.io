#+AUTHOR: Zhengchao Xu
#+EMAIL: xuzhengchaojob@gmail.com
#+DESCRIPTION: Org mode [[http://orgmode.org/manual/index.html#Top][官方文档]] 阅读笔记
#+OPTIONS: toc:nil ^:nil
#+STARTUP: content hideblocks align
#+CONSTANTS: lx="Zhengchao Xu" pi=3.14
#+TITLE: Org mode 官方文档阅读笔记

based on Org version 8.2.10 (release_8.2.10-41-g42228a). Emacs version 24.4.1

#+TOC: headlines 1 
* 文档结构
** 大纲模式
org mode是建立在大纲视图(outline mode). 大纲可以使笔记和灵感按照层级结构
进行组织, 这种结构有两个好处:
1. 实现对文档的概括性浏览(只看大纲).
2. 只显示当前正在工作的部分.
org mode提供了一个"org-cycle"命令来实现大纲的显示/隐藏功能, 这个命令默认
被绑定到了<TAB>键.
** 标题
org mode采用标题的形势来实现大纲结构, 标题的写法很简单, 在文本的最开始加上1到多个
星号即表示标题.
*** 标题显示快捷键

| 快捷键            | 功能                              | 对应命令                    |
|-------------------+-----------------------------------+-----------------------------|
| TAB               | 循环打开关闭当前标题              | org-cycle                   |
| S-TAB/C-u TAB     | 循环打开关闭所有标题              | org-global-cycle            |
| C-u C-u TAB       | 恢复到最初视图                    | org-set-startup-visibility  |
| C-u C-u C-u TAB   | 显示所有                          | show-all                    |
| C-c C-r           |                                   | org-reveal                  |
| C-c C-k           | 显示当前标题的所有子树标题        | show-branches               |
| (C-u N) C-c TAB   | 显示当前标题的(N层)子树           | show-children               |
| (C-u N) C-c C-x b | 在新buffer显示(从第N层开始的)子树 | org-tree-to-indirect-buffer |
| C-c C-x v         | 复制当前区域内容                  | org-copy-visible            |

*** 初始化"可见性"
Emacs打开org文件默认只显示顶层标题, 可以通过 "#+STARTUP" 选项来配置
第一次打开要显示的内容. #+STARTUP的参数包括
| overview       | 只显示顶层标题 |
| content        | 显示所有标题   |
| showall        | 显示所有内容   |
| showeverything |                |

*** 编辑"不可见区域"报错
有时候会不小心编辑到"不可见区域", 编辑器默认不会报错, 所以如果想组织这个
行为, 可以在配置文件中设置org-catch-invisible-edits的值为非nil.例如下面
的代码, 这样就可以阻止编辑非可见区域.
#+BEGIN_SRC elisp
(setq-default org-catch-invisible-edits 'error)
#+END_SRC

org-catch-invisible-edits的更多参数可以参考 C-h v org-catch-invisible-edits 
*** 标题快捷键
| 快捷键         | 功能                       | Note         |
|----------------+----------------------------+--------------|
|                |                            | <6>          |
| C-c C-n        | 下个可见标题               |              |
| C-c C-p        | 上个可见标题               |              |
| C-c C-f        | 上个同级标题               |              |
| C-c C-b        | 下个同级标题               |              |
| C-c C-u        | 上级标题                   |              |
| C-c C-j        | 跳到指定位置               |              |
|                |                            |              |
| M-RET          | 创建同级标题               | 可能会"割断"当前标题内容 |
| C-u C-u M-RET  | 在当前树的最后创建同级标题 |              |
| C-RET          | 当前标题后面创建同级标题   | 不会"割断"   |
| M-S-RET        | 创建TODO标题               | 同M-RET      |
| C-S-RET        | 创建TODO标题               | C-RET        |
|                |                            |              |
| TAB            | 改变空标题的level          |              |
| M-left/M-right | 升级/降级                  |              |
| M-S-left/right | 所有子树升级/降级          |              |
| M-S-up/down    | 上移/下移                  |              |
|                |                            |              |
| M-h            | 标记当前内容               | 连击会标记更多 |
| C-c @          | 标记当前标题及内容         |              |
| C-c C-x C-w    | 剪切当前子树               |              |
| C-c C-x M-w    | 复制当前子树               |              |
| C-y            | 粘贴                       |              |
| C-c C-x c      | 复制多次                   |              |
| C-c ^          | 排序标题                   |              |
| C-x n s        | 让buffer只显示当前子树     |              |
| C-x n w        | 恢复buffer显示             |              |
| C-c *          | 添加/去掉星星              |              |
*** 稀疏树显示
Org mode的另一个功能就可以只展现你想要的内容, 称之为"稀疏树"展示.
使用快捷键"C-c /"可以调出稀疏树功能, 它会询问你想要显示的内容, 
如下图所示.
file:../../static/img/sparsetree.png 
选择 '/' 或 "r" 会显示正则表达式搜索, 输入搜索内容即可以稀疏树方式展示结果, 如果
结果只在标题, 则显示标题, 如果在内容则显示内容, 搜索关键字会高亮. 按 "C-c C-c"会
取消高亮. 如果 C-u N之后输入C-c / r, 之前的N此搜索都会显示.
快捷键 "M-g n/p"用于在搜索结果之间跳转. 命令 "ps-print-buffer-with-faces"用于
打印机打印搜索结果.
*** 列表
org mode可以显示列表, 以下列字符开头的文本都为列表" - + 1. 1) *",
标题的大部分快捷键都可以用于列表, 其他的快捷键包括:
| C-c -        | 改变列表展示方式 |
| S-left/right | 同上             |
*** 脚注
org mode支持脚注功能, 脚注通常用 =[fn:数字]= 表示, 然后在其他地方写上
脚注说明[fn:1]:
#+BEGIN_EXAMPLE
     The Org homepage[fn:1] now looks a lot better than it used to.
     ...
     [fn:1] The link is: http://orgmode.org
#+END_EXAMPLE
[fn:1]脚注示例.

* 表格
orgmode提供了ascii形式表示的表格, 任何以"|"字符开头的内容都会认为是
表格的一部分. 在表格当前行按TAB或C-c C-c会格式化表格.按RET键会自动创建
下一行. 同时任何以"|-"开头的行都被认为是表格分隔符.
** 表格快捷键
 "C-c |"可以创建表格或将选中区域转化为表格, 会询问你创建的表格大小.
如果要转化的区域都含有TAB字符, 会将TAB作为分隔符. 如果为逗号, 会认为是逗号.
否则为空白字符.可以通过前缀强制选择"分隔符":
+ C-u 强制认为是CSV格式(逗号分割)
+ C-u C-u 强制TAB

| 快捷键               | 功能                   |
|----------------------+------------------------|
| C-c C-c              | 对齐表格               |
| TAB                  | 对齐表格, 移到下一格   |
| S-TAB                | 对齐表格, 移到上一格   |
| RET                  | 对齐表格, 移到下一行   |
| M-a/e                | 移到这一格开始/结尾    |
| M-left/right/up/down | 左/右/上/下移动该行    |
| M-S-left/up/         | 删除当前列/行          |
| M-S-right/down       | 添加新列/行            |
| C-c -/C-c RET        | 添加新分割行           |
| C-c ^                | 排序                   |
| C-c C-x M-w/C-w/C-y  | 粘贴/剪切/复制当前区域 |
| C-c +                | 计算当前列的和         |
| S-RET                | 复制                   |
| C-c `                | 新窗口编辑当前区域.    |
| M-x org-table-import | 导入文件作为表格       |
| C-c                  | 将选中区域表示为表格   |
| M-x org-table-export | 到处表格               |

** 表格宽度和对齐
*** 设置列宽度
要设置列宽度, 在这一列的任何的一个空白单元格(没有的话可以创建一个空白行)内
加入"<N>", N就是你要设置的宽度.然后按"C-c C-c"即可改变宽度. 
如果该列某一行的宽度大于N, 那么该区域内容会被"压缩", 如果要查看完整内容, 把
鼠标放到上面即可, 如果要编辑该内容, 在区域上按"C-c `". 

当第一次打开一个设置了"压缩"的表格时,会看到"压缩"并未发生, 超过宽度的内容
仍然会在表格中显示, 可以在文档中加入 "#+STARTUP:align" 来打开这个功能. 
*** 设置左右对齐
跟设置宽度一样, 在某一空白区域添加 <r> 或 <l>. 宽度和对齐也可以结合使用:<r10>.
** 列组
Org导出表格时, 默认是以行为单位, 也可以按列为单位来处理数据.
这需要添加一个特殊行: 该行的第一个区域只包含"/", 其他以"<"表示的区域
表示是一个组的开始, 以">"结束表示组的结束.

** Orgtbl 模式
如果想在其他的mode下使用org mode的table功能, 可以输入命令 "orgtbl-mode".
** 数据表(Spreadsheet)
org mode提供了强大的表格计算能力, 通过使用emacs的"calc"或者直接运行
lisp程序, 可以对表格的域进行计算.g
*** 引用表中数据
如果要在公式或其他地方使用表格中的数据, 必须要有一种方法可以表示表格中的
一个或一块区域. Org中区域可以通过名称/坐标/相对地址等方式引用. 可以在
单元格上面使用快捷键"C-c ?"来查看该单元格的坐标. 或使用 "C-c }"来显示一块区域.
1. 引用表格的几种方法
 | 格式          | 含义             | 补充                     |
 |---------------+------------------+--------------------------|
 | letter/number | 某一格           | B3表示第三行第二列       |
 | @N            | 某一行           |                          |
 | $N            | 某一列           |                          |
 | @M$N          | 某一格           |                          |
 | $+/-N         | 当前列的相对列   | 同样适用于行             |
 | $< $>         | 第一列和最后一列 | $<<<倒数第三列, 适用于行 |
 | @I            | high line        | 例如本例第二行           |
 | @0 $0         | 当前行/列        |                          |
2. 使用".."来表示一个区域, 例如 $1..$3表示第一列到第三列
3. 使用 @# $# 来表示当前行/列的值.
4. 命名. org table支持命名方式, 可以通过 "org-table-formula-constants"来设置一个
   全局的名字, 或通过 "#+CONSTANTS"单独为一个文件设置名称变量. 也可以在表格中
   使用emacs的properties功能来使用property变量.
5. 远程引用. 可以通过远程引用的方式引用其他文件或该文件其他表格的内容.
   远程引用的语法为: remote(NAME-OR-ID, REF). 第一个参数可以是本文件中
   用 #+NAME 来命名的表格, 或其他文件中的一个entry ID. REF是当前表格的一个区域.
*** 表格处理计算
表格计算可以在表格底部用"#+TBLFM:"关键字, 后面接计算公式, 目前
表格支持 "Calc" 和 lisp计算公式.
**** 公式语法. "公式"是指可以被"Calc"包识别的任何代数公式.
   注: Calc中"/"的优先级低于"*". 
**** 附加模式. org支持公式后面添加任意数量的附加模式, 公式和
   附加模式之间用";"隔开. 目前支持的附加模式包括:
   | 表示        | 意义                              |   |
   |-------------+-----------------------------------+---|
   | pN          | 计算精度                          |   |
   | nN,sN,eN,fN | 普通/科学/工程/固定表示           |   |
   | D/R         | 度/弧度模式                       |   |
   | F/S         | 小数模式                          |   |
   | T/t         | 时间计算模式                      |   |
   | E           | 控制怎样表示空白格                |   |
   | N           | 把所有表格表示为数字, 非数字0代替 |   |
   | L           |                                   |   |

   下面是一些实例程序
    #+BEGIN_EXAMPLE
     $1+$2                Sum of first and second field
     $1+$2;%.2f           Same, format result to two decimals
     exp($2)+exp($1)      Math functions can be used
     tan($1);Dp3s1        Compute in degrees, precision 3, display SCI 1
#+END_EXAMPLE
**** lisp代码处理表格.
   org支持用lisp代码处理表格. 以 '( 开头的表达式会被解析为lisp代码,
   默认情况下, 表格的内容会被引用为字符串, 如果需要将其处理为数字,
   需要将其转化为N模式(后面加";N"). 也可以用使用双引号将其表示为字符串.
   "范围(..)"会被解析为空格分开的域. 下面是一些例子:
   #+BEGIN_EXAMPLE
'(concat (substring $1 1 2) (substring $1 0 1) (substring $1 2))
    Swap the first two characters of the content of column 1.
'(+ $1 $2);N   Add columns 1 and 2, equivalent to Calc's `$1+$2'.
'(apply '+ '($1..$4));N   Compute the sum of columns 1 to 4, like Calc's `vsum($1..$4)'.
   #+END_EXAMPLE
**** 时间计算.
   前面讲过表格支持时间计算.表格支持的时间格式为 HH:MM[:SS], 
   其中SS是可选, 如果公式后面接";T", 计算结果会展示为 HH:MM:SS.
   如果为";t", 计算结果为小时的小数表示. 下面的例子展示了这一点:
   #+BEGIN_EXAMPLE
       |  Task 1 |   Task 2 |    Total |
       |---------+----------+----------|
       |    2:12 |     1:47 | 03:59:00 |
       | 3:02:20 | -2:07:00 |     0.92 |
       #+TBLFM: @2$3=$1+$2;T::@3$3=$1+$2;t
   #+END_EXAMPLE
**** 直接在域中输入公式. 
   可以直接在域中输入公式. 在域中输入":="并后面接公式. 也可以
   在当前域中输入 "C-u C-c ="命令在提示框中输入公式.
**** 查找功能
* 导出功能
  
* example
|   |     |    |     |
|---+-----+----+-----|
| 2 |   6 |  4 |   4 |
| 5 |   5 |    |   8 |
| 1 |   | 85 | 850 |
|---+-----+----+-----|
| 1 |   2 |  3 |   4 |
#+TBLFM: $2=$1+$3::$3=if($1 < $2, $2/2, $2*3)::@2$4=$2
#+TBLFM: $3 = '(+ $1 $2);N
#+TBLFM: $4='(apply '+ '($1..$3));N
#+TBLFM: $1='(concat (substring $4 1 2) (substring $4 0 1) (substring $4 2))
#+TBLFM: $4=vsum($2..$3)
#+TBLFM: @4$4 = @4$1+@4$2+@4$3;t
#+TBLFM: $3=$4
