#+OPTIONS: num:nil
#+OPTIONS: ^:nil
#+OPTIONS: toc:nil
#+AUTHOR: Luis404
#+EMAIL: luisxu404@gmail.com

#+BEGIN_HTML
---
layout: post
title: Git Source Code Learn
tag: [Git]
description: [I am a git fan. I am trying to hack the source code]
---
#+END_HTML

* 1. First step
get git code : git clone https://github.com/git/git;
checkout to version 1.0: git checkout v1.0.0
* 2. 2015/01/14
checkout to the oldest commit, just wanna see the linus-code-style
** 2.1 cache.h
defines the cache_header, cache_time, and cache_entry.
+ cache_header: defines the *signature*, *version*, *entries* and *shal*.
+ cache_time: define the *sec* and *nsec*.
+ cache_entry: define the entry, including *gid*, *uid*, *size*...
** 2.2 Makefile
I don't find the *git* prog in the makefile, only some small programs.
These programs will be installed to bin after build.
** 2.3 read-cache.c
这个文件其他大多文件使用, 该文件定义了很多基本的函数:
1. hexval() 用于将十六进制转换为整数.
2. get_sha1_hex()用于将长度为40的 SHA1(160位)的十六进制表示转换为一个 无符号字符数组.
3. sha1_to_hex()将长度为20的字符数组转换为 hex 字符串.
4. sha1_file_name()参数为一个表示 sha1的字符数组, 返回值是一个路径, 路径的格式为
   "DEFAULT_DB_ENV/A/B", 其中 A 是 sha1的 HEX 字符串的前两个字符,B 是剩下的18个字符.
   很酷的生成路径的算法, 透过(i>0)跳过了第二个"/";

#+BEGIN_SRC c
	for (i = 0; i < 20; i++) {
		static char hex[] = "0123456789abcdef";
		unsigned int val = sha1[i];
		char *pos = name + i*2 + (i > 0);
		*pos++ = hex[val >> 4];
		*pos = hex[val & 0xf];
	}

#+END_SRC

5. read_sha1_file()用于将4中的路径中的文件内容读到 buffer 中,并返回 buffer.
   这个文件是一个压缩文件, 所以通过 mmap 将文件映射到 memory 中后(这时可以关掉 fd), 
   要初始化一个z_stream 变量. 接下来会通过将参数中传入的 type 和 size 写入 buffer 中,
   并 malloc 一个 size 大小的 buffer,然后将从文件中读出的内容 copy 到 buffer 中,并返回 buf.
6. write_sha1_file()将 len 大小的 buf 写入到 zlib 格式的压缩文件中.
   函数刚开始先通过 deflateInit()/deflateBound()函数将 buf 压缩到 size 大小的 compressed 指向的 buffer 中, 
   然后通过OpenSSL 的 SHA1_Init()/SHA1_Update()/SHA1_Final() 函数 基于 compressed生成
   SHA1值,最后调用 write_sha1_buffer() 将压缩内容写入 SHA1表示的文件中.
1. write_sha1_buffer()将压缩后的 buffer 写入 SHA1表示的文件中.
2. verify_hdr()用来检查 cache_header 变量是否合法, 检查的内容包括: signature, version, 
   基于 header 生成的 SHA1值与 header的 SHA1变量是否相等.
3. read_cache()核心工作:
   + 打开".dircache/index", mmap 到内存, 并检测 内存 是否合法.
   + 从 hdr 中取出 entry 数量和需要分配的数量, 然后 calloc 需分配量个 cache_entry指针.
   + 遍历*内存*, 找出所有的 entry,然后存到  指针数组中.

** 2.4 init-db.c
该文件只有一个 main()函数,做的主要工作:
+ 创建目录".dircache"
+ 如果没定义 DB_ENVIROMENT, 使用默认的变量".dircache/object", 并在该目录下创建"0~FF"256个子目录.
** 2.5 show-diff.c
该文件会编译为 show-diff 命令,文件主要包含三个函数:
+ main(), 主要工作:调用 read_cache()函数,遍历 获得的 cache_entry, 判断该 entry 的内容是否
  有变, 如果有变化, 调用 read_sha1_file()获取文件, 然后调用 show_differences()显示变化.
+ match_stat():  用 stat() 函数获取 cache_entry 指向的文件,然后与 cache_entry 中缓存的相应
   stat 信息做对比,如果有变化,则表示文件有变化.
+ show_differences():调用 "diff -u - name" 显示变化
* 3. Git tips
	
	master=HEAD, stage, workspace, three big parts of git
	
	1. 	git checkout tag : check out a know tag
	2. 	git tag : check the tags of current project
	3. 	git config --global : 	modify "~/.gitconfig" 
				  --local : 	modify "workspace/.git/config
				  --system :	modify "/etc/gitconfig"
				  --unset --global/local/system : "delete the related config"
	4. 	git init dirname : create a repository named dirname
	5. 	git commit --amend para : modify the latest commit
	6. 	git log	--commit : show the file detail changes of the commit
				--pretty=oneline : a oneline log with magic number and log mesg
				--pretty=raw : show a full detail info of a commit record
				--graph : show a tree format of commit
	7. 	git diff 		 : compare workspace with stage 
				--cached : compare stage with repo
				 HEAD	 : compare workspace with repo
	8. 	git reset HEAD : stage will be recovered by master, not affect workspace
	9. 	git checkout -- file : file change in workspace will be covered, stage c
							   content not change
					HEAD <file> : file in stage and workspace all be covered
	10.	git clean -fd : clean all the files and dirs not add to repo. 
	11.	git ls -l HEAD : show HEAD tree
			   -s :		 show stage tree
	12.	git stash : temporily saved the workspace, where will become clean after exec this command
	13. 	git cat-file -t magicnumber : check the type of magic number
					 -p magicnumber : check the content of the magic number
	14.	git clone repo tag
	15. change the default editor: git config --global core.editor "vim"
	16. get the ".git" position: git rev-parse --git-dir
	17. git commit --amend: modify last commit, no commit a new one
	18. how to check out files from a bare repo
		cat .git/packed-refs, checkout the files from the SHA1 hash number
	
	How to get all from ftp server?
	A: wget ftp://xxx.xx7.xxx.xx/* --ftp-user=xxxxxxxxxxxxxxxxxxxx --ftp-password=xxxxxxxx -r
